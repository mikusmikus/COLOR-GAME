{"version":3,"sources":["sounds/press.wav","components/button/button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","key","buttonClickHandler","className","label","type","onClick","colorArr","counterArr","App","useState","colors","setColors","clickedColorArr","setClickedColorArr","shownTitle","setShowTitle","shownColor","setShowColor","count","setCount","startButton","gameOptions","gameOptions2","withKeyboard","withButtons","results","startGame","whatWeSee","setWhatWeSee","correctColors","setCorrectColors","keyPress","setKeyPress","timeOut","isInitialMount","useRef","audio","Audio","press","useEffect","counter","i","length","color","substring","toLowerCase","copyColorArr","console","log","current","document","body","addEventListener","e","play","toast","error","position","POSITION","TOP_CENTER","autoClose","title","setTimeout","map","changeColorArr","style","animation","backgroundColor","size","copyColors","copyColorsClicked","randomNumber","Math","floor","random","randomNumber2","push","id","uuidv4","show","GenerateColorArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7c8de65a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/press.1e149785.wav\";","import React, { FC } from 'react';\r\n// import styles from './button.module.scss';\r\nimport './button.css';\r\n\r\ntype Props = {\r\n  key?: number | string;\r\n  className: string;\r\n  label: string;\r\n  buttonClickHandler: () => void;\r\n};\r\n\r\nconst Button: FC<Props> = ({ key, buttonClickHandler, className, label }) => {\r\n  return (\r\n    <>\r\n      <button\r\n        key={key}\r\n        type=\"button\"\r\n        className={className}\r\n        onClick={buttonClickHandler}\r\n      >\r\n        {label}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","/* eslint-disable react/jsx-curly-newline */\nimport React, { useState, useEffect, useRef } from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport 'flexboxgrid';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\n// @ts-ignore\nimport press from './sounds/press.wav';\nimport Button from './components/button/button';\n\ntype Color = {\n  id: string;\n  color: string;\n  title: string;\n  show: boolean;\n};\nconst colorArr = ['red', 'green', 'yellow', 'blue'];\nconst counterArr = [10, 20, 40];\n\nconst App = () => {\n  const [colors, setColors] = useState<Color[]>([]);\n  const [clickedColorArr, setClickedColorArr] = useState(['']);\n  const [shownTitle, setShowTitle] = useState('');\n  const [shownColor, setShowColor] = useState('');\n  const [count, setCount] = useState(-15);\n  const [whatWeSee, setWhatWeSee] = useState({\n    startButton: true,\n    gameOptions: false,\n    gameOptions2: false,\n    withKeyboard: false,\n    withButtons: false,\n    results: false,\n    startGame: false,\n  });\n\n  const [correctColors, setCorrectColors] = useState(0);\n  const [keyPress, setKeyPress] = useState('');\n  const [timeOut, setTimeOut] = useState(2000);\n  const isInitialMount = useRef(true);\n\n  const audio = new Audio(press);\n\n  const playSound = (audioFile: { play: () => void }) => {\n    audioFile.play();\n  };\n\n  useEffect(() => {\n    let counter = 0;\n    for (let i = 0; i < colors.length; i++) {\n      if (\n        colors[i].color.substring(0, 1).toLowerCase() ===\n        clickedColorArr[i].substring(0, 1).toLowerCase()\n      ) {\n        counter += 1;\n      }\n    }\n    setCorrectColors(counter);\n  }, [whatWeSee.results]);\n\n  useEffect(() => {\n    if (!whatWeSee.withKeyboard) {\n      return;\n    }\n    if (keyPress) {\n      const copyColorArr = [...clickedColorArr];\n      copyColorArr[count] = keyPress;\n      setClickedColorArr(copyColorArr);\n    }\n  }, [keyPress]);\n\n  console.log(clickedColorArr);\n  // console.log(whatWeSee);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      // @ts-ignore\n      document.body.addEventListener('keydown', (e) => setKeyPress(e.key));\n      isInitialMount.current = false;\n      return;\n    }\n    if (!whatWeSee.startGame) {\n      return;\n    }\n\n    if (count > 0 && !clickedColorArr[count - 1]) {\n      playSound(audio);\n      toast.error('missed to press any key !', {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 21800,\n      });\n    }\n\n    if (count < colors.length) {\n      // console.log(count, 'gii');\n      setShowTitle(colors[count].title);\n      setShowColor(colors[count].color);\n      setKeyPress('');\n      setTimeout(() => {\n        setCount(count + 1);\n      }, timeOut);\n    } else {\n      setWhatWeSee({\n        startButton: false,\n        gameOptions: false,\n        gameOptions2: false,\n        withKeyboard: false,\n        withButtons: false,\n        results: true,\n        startGame: false,\n      });\n    }\n  }, [count, whatWeSee.startGame]);\n\n  const GenerateColorArray = (size: number) => {\n    const copyColors = [];\n    const copyColorsClicked = [];\n    for (let i = 0; i < size; i++) {\n      const randomNumber = Math.floor(Math.random() * 4);\n      const randomNumber2 = Math.floor(Math.random() * 4);\n      copyColorsClicked.push('');\n      copyColors.push({\n        id: uuidv4(),\n        color: colorArr[randomNumber],\n        title: colorArr[randomNumber2],\n        show: false,\n      });\n    }\n    setWhatWeSee({\n      startButton: false,\n      gameOptions: false,\n      gameOptions2: true,\n      withKeyboard: false,\n      withButtons: false,\n      results: false,\n      startGame: false,\n    });\n    setClickedColorArr(copyColorsClicked);\n    setColors(copyColors);\n  };\n\n  const changeColorArr = (color: string) => {\n    const copyColorArr = [...clickedColorArr];\n    copyColorArr[count] = color;\n    setClickedColorArr(copyColorArr);\n  };\n\n  return (\n    <>\n      <div className=\"background-color\" />\n      <div className=\"container header\">\n        <div className=\"row middle-xs center-xs\">\n          <div className=\"col-xs-8 col-xs-offset-2\">\n            <h1 className=\"header__heading\">Welcome to Color game</h1>\n          </div>\n          <div className=\"col-xs-2\">\n            {/* <div className=\"header__button-wrapper\">\n              <button type=\"button\" className=\"header__button\">\n                LV\n              </button>\n              <button type=\"button\" className=\"header__button\">\n                EN\n              </button>\n            </div> */}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            {!whatWeSee.startGame ? (\n              <div className=\"playArea__before\">\n                {whatWeSee.startButton && (\n                  <Button\n                    className=\"start__button\"\n                    label=\"START\"\n                    buttonClickHandler={() =>\n                      setWhatWeSee({\n                        startButton: false,\n                        gameOptions: true,\n                        gameOptions2: false,\n                        withKeyboard: false,\n                        withButtons: false,\n                        results: false,\n                        startGame: false,\n                      })\n                    }\n                  />\n                )}\n                {whatWeSee.gameOptions && (\n                  <>\n                    <h1 className=\"gameOption__header\">Select game size</h1>\n                    {counterArr.map((counter) => (\n                      <Button\n                        className=\"button\"\n                        key={counter}\n                        label={`${counter} color game`}\n                        buttonClickHandler={() => GenerateColorArray(counter)}\n                      />\n                    ))}\n                  </>\n                )}\n                {whatWeSee.gameOptions2 && (\n                  <>\n                    <h1 className=\"gameOption__header\">\n                      Select keyboard or mouse to play with\n                    </h1>\n                    <Button\n                      className=\"button\"\n                      label=\"mouse\"\n                      buttonClickHandler={() => {\n                        setCount(0);\n                        setWhatWeSee({\n                          startButton: false,\n                          gameOptions: false,\n                          gameOptions2: false,\n                          withKeyboard: false,\n                          withButtons: true,\n                          results: false,\n                          startGame: true,\n                        });\n                      }}\n                    />\n                    <Button\n                      className=\"button\"\n                      label=\"keyboard\"\n                      buttonClickHandler={() => {\n                        setCount(0);\n                        setWhatWeSee({\n                          startButton: false,\n                          gameOptions: false,\n                          gameOptions2: false,\n                          withKeyboard: true,\n                          withButtons: false,\n                          results: false,\n                          startGame: true,\n                        });\n                      }}\n                    />\n                    {colorArr.map((color) => (\n                      <span key={color} style={{ color }} className=\"heading2\">\n                        {`press ${color.substring(0, 1)} = ${color}`}\n                      </span>\n                    ))}\n                  </>\n                )}\n                {whatWeSee.results && (\n                  <div>\n                    <h2 className=\"result__header\">\n                      {!correctColors && 'sorry... 0 points'}\n                      {correctColors === 1 && 'you got 1 point'}\n                      {correctColors > 1 && `you got ${correctColors} points`}\n                    </h2>\n                    <div className=\"result__button-wrapper\">\n                      <Button\n                        className=\"button button--result\"\n                        label=\"play again!\"\n                        buttonClickHandler={() => {\n                          setWhatWeSee({\n                            startButton: true,\n                            gameOptions: false,\n                            gameOptions2: false,\n                            withKeyboard: false,\n                            withButtons: false,\n                            results: false,\n                            startGame: false,\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"playArea__before playArea\">\n                {whatWeSee.withButtons ? (\n                  <div>\n                    {colorArr.map((color) => (\n                      <Button\n                        key={color}\n                        label={color}\n                        className=\"button button--game\"\n                        buttonClickHandler={() => {\n                          changeColorArr(color);\n                        }}\n                      />\n                    ))}\n                    <div className=\"shownColor-wrapper\">\n                      <div\n                        className=\"timer-line\"\n                        style={{\n                          animation: `timer ${timeOut / 1000}s linear infinite`,\n                          backgroundColor: shownColor,\n                        }}\n                      />\n                      <span\n                        className=\"shownColor\"\n                        style={{ color: shownColor }}\n                      >\n                        {shownTitle}\n                      </span>\n                      <div className=\"shownColor__footer\">\n                        <span>\n                          color {count + 1}/{clickedColorArr.length}\n                        </span>\n                        <Button\n                          label=\"end game\"\n                          className=\"button button--result\"\n                          buttonClickHandler={() => {\n                            setTimeout(() => {\n                              setWhatWeSee({\n                                startButton: true,\n                                gameOptions: false,\n                                gameOptions2: false,\n                                withKeyboard: false,\n                                withButtons: false,\n                                results: false,\n                                startGame: false,\n                              });\n                            }, 300);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"shownColor-wrapper\">\n                    <div\n                      className=\"timer-line\"\n                      style={{\n                        animation: `timer ${timeOut / 1000}s linear infinite`,\n                        backgroundColor: shownColor,\n                      }}\n                    />\n                    <p>\n                      you pressed:{' '}\n                      <span className=\"keyPress\" style={{ color: shownColor }}>\n                        {' '}\n                        {keyPress}\n                      </span>\n                    </p>\n                    <span className=\"shownColor\" style={{ color: shownColor }}>\n                      {shownTitle}\n                    </span>\n                    <div className=\"shownColor__footer\">\n                      <span>\n                        color {count + 1}/{clickedColorArr.length}\n                      </span>\n                      <Button\n                        label=\"end game\"\n                        className=\"button button--result\"\n                        buttonClickHandler={() => {\n                          setTimeout(() => {\n                            setWhatWeSee({\n                              startButton: true,\n                              gameOptions: false,\n                              gameOptions2: false,\n                              withKeyboard: false,\n                              withButtons: false,\n                              results: false,\n                              startGame: false,\n                            });\n                          }, 300);\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n        {/* <ToastContainer /> */}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
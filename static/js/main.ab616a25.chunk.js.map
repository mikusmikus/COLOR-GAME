{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["colorArr","counterArr","App","useState","colors","setColors","clickedColorArr","setClickedColorArr","shownTitle","setShowTitle","shownColor","setShowColor","count","setCount","results","setResults","start","setStart","correctColors","setCorrectColors","isInitialMount","useRef","useEffect","counter","i","length","color","console","log","current","title","setTimeout","className","map","type","onClick","copyColorArr","changeColorArr","size","copyColors","copyColorsClicked","randomNumber","Math","floor","random","randomNumber2","push","id","uuidv4","show","GenerateColorArray","style","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAkDMA,EAAW,CAAC,MAAO,QAAS,SAAU,QACtCC,EAAa,CAAC,GAAI,GAAI,IA4HbC,EA1HH,WAAO,IAAD,EACYC,mBAAkB,IAD9B,mBACTC,EADS,KACDC,EADC,OAE8BF,mBAAS,CAAC,KAFxC,mBAETG,EAFS,KAEQC,EAFR,OAGmBJ,mBAAS,IAH5B,mBAGTK,EAHS,KAGGC,EAHH,OAImBN,mBAAS,IAJ5B,mBAITO,EAJS,KAIGC,EAJH,OAKUR,oBAAU,GALpB,mBAKTS,EALS,KAKFC,EALE,OAMcV,oBAAS,GANvB,mBAMTW,EANS,KAMAC,EANA,OAOUZ,oBAAS,GAPnB,mBAOTa,EAPS,KAOFC,EAPE,OAQ0Bd,mBAAS,GARnC,mBAQTe,EARS,KAQMC,EARN,KASVC,EAAiBC,kBAAO,GAE9BC,qBAAU,WAER,IADA,IAAIC,EAAU,EACLC,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,IAC7BpB,EAAOoB,GAAGE,QAAUpB,EAAgBkB,KACtCD,GAAW,GAGfJ,EAAiBI,GACjBI,QAAQC,IAAIxB,GACZuB,QAAQC,IAAItB,KACX,CAACQ,IAEJQ,qBAAU,WACJF,EAAeS,QACjBT,EAAeS,SAAU,EAGvBjB,EAAQR,EAAOqB,QACjBhB,EAAaL,EAAOQ,GAAOkB,OAC3BnB,EAAaP,EAAOQ,GAAOc,OAC3BK,YAAW,WACTlB,EAASD,EAAQ,KAChB,OAGHG,GAAW,GACXE,GAAS,MAGV,CAACL,IA6BJ,OACE,sBAAKoB,UAAU,YAAf,UACIhB,EAcA,mCACGhB,EAASiC,KAAI,SAACP,GAAD,OACZ,wBAEEM,UAAU,SACVE,KAAK,SAELC,QAAS,kBA7BE,SAACT,GACtB,IAAMU,EAAY,YAAO9B,GACzB8B,EAAaxB,GAASc,EACtBnB,EAAmB6B,GA0BMC,CAAeX,IALhC,SAOGA,GANIA,QAhBX,mCACGzB,EAAWgC,KAAI,SAACV,GAAD,OACd,yBAEEW,KAAK,SACLF,UAAU,SACVG,QAAS,kBApCM,SAACG,GAG1B,IAFA,IAAMC,EAAa,GACbC,EAAoB,GACjBhB,EAAI,EAAGA,EAAIc,EAAMd,IAAK,CAC7B,IAAMiB,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC/BC,EAAgBH,KAAKC,MAAsB,EAAhBD,KAAKE,UACtCJ,EAAkBM,KAAK,YACvBP,EAAWO,KAAK,CACdC,GAAIC,cACJtB,MAAO1B,EAASyC,GAChBX,MAAO9B,EAAS6C,GAChBI,MAAM,IAGVhC,GAAS,GACTV,EAAmBiC,GACnBnC,EAAUkC,GACV1B,EAAS,GACTE,GAAW,GAkBcmC,CAAmB3B,IAJpC,UAMGA,EANH,gBACOA,QAwBZT,EACC,8BACE,qBAAIqC,MAAO,CAAEC,SAAU,SAAvB,mCACoBlC,EADpB,oBAKF,8BACE,oBAAIiC,MAAO,CAAEzB,MAAOhB,EAAY0C,SAAU,SAA1C,SAAsD5C,UClJjD6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab616a25.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'flexboxgrid';\nimport { v4 as uuidv4 } from 'uuid';\n\n// const colorsArray = [\n//   {\n//     id: uuidv4(),\n//     color: 'red',\n//     title: 'yellow',\n//     show: true,\n//   },\n//   {\n//     id: uuidv4(),\n//     color: 'green',\n//     title: 'yellow',\n//     show: false,\n//   },\n//   {\n//     id: uuidv4(),\n//     color: 'blue',\n//     title: 'red',\n//     show: false,\n//   },\n//   {\n//     id: uuidv4(),\n//     color: 'red',\n//     title: 'yellow',\n//     show: false,\n//   },\n//   {\n//     id: uuidv4(),\n//     color: 'green',\n//     title: 'blue',\n//     show: false,\n//   },\n//   {\n//     id: uuidv4(),\n//     color: 'blue',\n//     title: 'green',\n//     show: false,\n//   },\n// ];\n\ntype Color = {\n  id: string;\n  color: string;\n  title: string;\n  show: boolean;\n};\nconst colorArr = ['red', 'green', 'yellow', 'blue'];\nconst counterArr = [10, 20, 40];\n\nconst App = () => {\n  const [colors, setColors] = useState<Color[]>([]);\n  const [clickedColorArr, setClickedColorArr] = useState(['']);\n  const [shownTitle, setShowTitle] = useState('');\n  const [shownColor, setShowColor] = useState('');\n  const [count, setCount] = useState(-1);\n  const [results, setResults] = useState(false);\n  const [start, setStart] = useState(false);\n  const [correctColors, setCorrectColors] = useState(0);\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    let counter = 0;\n    for (let i = 0; i < colors.length; i++) {\n      if (colors[i].color === clickedColorArr[i]) {\n        counter += 1;\n      }\n    }\n    setCorrectColors(counter);\n    console.log(colors);\n    console.log(clickedColorArr);\n  }, [results]);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      return;\n    }\n    if (count < colors.length) {\n      setShowTitle(colors[count].title);\n      setShowColor(colors[count].color);\n      setTimeout(() => {\n        setCount(count + 1);\n      }, 2000);\n    } else {\n      // setTimeout(() => {\n      setResults(true);\n      setStart(false);\n      // }, 2000);\n    }\n  }, [count]);\n\n  const GenerateColorArray = (size: number) => {\n    const copyColors = [];\n    const copyColorsClicked = [];\n    for (let i = 0; i < size; i++) {\n      const randomNumber = Math.floor(Math.random() * 4);\n      const randomNumber2 = Math.floor(Math.random() * 4);\n      copyColorsClicked.push('majakaja');\n      copyColors.push({\n        id: uuidv4(),\n        color: colorArr[randomNumber],\n        title: colorArr[randomNumber2],\n        show: false,\n      });\n    }\n    setStart(true);\n    setClickedColorArr(copyColorsClicked);\n    setColors(copyColors);\n    setCount(0);\n    setResults(false);\n  };\n\n  const changeColorArr = (color: string) => {\n    const copyColorArr = [...clickedColorArr];\n    copyColorArr[count] = color;\n    setClickedColorArr(copyColorArr);\n  };\n\n  return (\n    <div className=\"container\">\n      {!start ? (\n        <>\n          {counterArr.map((counter) => (\n            <button\n              key={counter}\n              type=\"button\"\n              className=\"button\"\n              onClick={() => GenerateColorArray(counter)}\n            >\n              {counter} color game\n            </button>\n          ))}\n        </>\n      ) : (\n        <>\n          {colorArr.map((color) => (\n            <button\n              key={color}\n              className=\"button\"\n              type=\"button\"\n              // style={{ backgroundColor: color }}\n              onClick={() => changeColorArr(color)}\n            >\n              {color}\n            </button>\n          ))}\n        </>\n      )}\n      {results ? (\n        <div>\n          <h2 style={{ fontSize: '100px' }}>\n            pareizi atminēji {correctColors} krāsas\n          </h2>\n        </div>\n      ) : (\n        <div>\n          <h1 style={{ color: shownColor, fontSize: '200px' }}>{shownTitle}</h1>\n        </div>\n      )}\n      {/* {colors.map(\n        (color: Color) =>\n          color.show && (\n            <h1 key={color.id} style={{ color: color.color }}>\n              {color.title}{' '}\n            </h1>\n          )\n      )} */}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
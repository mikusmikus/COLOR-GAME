{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["colorArr","counterArr","App","useState","colors","setColors","clickedColorArr","setClickedColorArr","shownTitle","setShowTitle","shownColor","setShowColor","count","setCount","startButton","gameOptions","gameOptions2","withKeyboard","withButtons","results","startGame","whatWeGonnaSee","setWhatWeGonnaSee","correctColors","setCorrectColors","keyPress","setKeyPress","timeOut","isInitialMount","useRef","useEffect","counter","i","length","color","substring","toLowerCase","copyColorArr","current","document","body","addEventListener","e","key","title","setTimeout","className","map","type","onClick","changeColorArr","style","size","copyColors","copyColorsClicked","randomNumber","Math","floor","random","randomNumber2","push","id","uuidv4","show","GenerateColorArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0NAYMA,EAAW,CAAC,MAAO,QAAS,SAAU,QACtCC,EAAa,CAAC,GAAI,GAAI,IAqVbC,EAnVH,WAAO,IAAD,EACYC,mBAAkB,IAD9B,mBACTC,EADS,KACDC,EADC,OAE8BF,mBAAS,CAAC,KAFxC,mBAETG,EAFS,KAEQC,EAFR,OAGmBJ,mBAAS,IAH5B,mBAGTK,EAHS,KAGGC,EAHH,OAImBN,mBAAS,IAJ5B,mBAITO,EAJS,KAIGC,EAJH,OAKUR,oBAAU,IALpB,mBAKTS,EALS,KAKFC,EALE,OAM4BV,mBAAS,CACnDW,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,IAbG,mBAMTC,EANS,KAMOC,EANP,OAgB0BnB,mBAAS,GAhBnC,mBAgBToB,EAhBS,KAgBMC,EAhBN,OAiBgBrB,mBAAS,IAjBzB,mBAiBTsB,EAjBS,KAiBCC,EAjBD,OAkBcvB,mBAAS,KAlBvB,mBAkBTwB,EAlBS,aAmBUxB,oBAAU,IAnBpB,mBAoBVyB,GApBU,UAoBOC,kBAAO,IAE9BC,qBAAU,WAER,IADA,IAAIC,EAAU,EACLC,EAAI,EAAGA,EAAI5B,EAAO6B,OAAQD,IAE/B5B,EAAO4B,GAAGE,MAAMC,UAAU,EAAG,GAAGC,gBAChC9B,EAAgB0B,GAAGG,UAAU,EAAG,GAAGC,gBAEnCL,GAAW,GAGfP,EAAiBO,KAChB,CAACV,EAAeF,UAEnBW,qBAAU,WACR,GAAKT,EAAeJ,cAGhBQ,EAAU,CACZ,IAAMY,EAAY,YAAO/B,GACzB+B,EAAazB,GAASa,EACtBlB,EAAmB8B,MAEpB,CAACZ,IAEJK,qBAAU,WACR,GAAIF,EAAeU,QAIjB,OAFAC,SAASC,KAAKC,iBAAiB,WAAW,SAACC,GAAD,OAAOhB,EAAYgB,EAAEC,aAC/Df,EAAeU,SAAU,GAGvB1B,EAAQR,EAAO6B,QACjBxB,EAAaL,EAAOQ,GAAOgC,OAC3BjC,EAAaP,EAAOQ,GAAOsB,OAC3BR,EAAY,IACZmB,YAAW,WACThC,EAASD,EAAQ,KAChBe,IAEHL,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,MAGd,CAACR,IAmCJ,OACE,qCACE,qBAAKkC,UAAU,qBACf,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,0BAAf,UACE,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,kBAAd,qCAEF,qBAAKA,UAAU,kBAanB,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACIzB,EAAeD,UA2Hf,qBAAK0B,UAAU,4BAAf,SACGzB,EAAeH,YACd,gCACGlB,EAAS+C,KAAI,SAACb,GAAD,OACZ,wBAEEY,UAAU,sBACVE,KAAK,SACLC,QAAS,kBAjKR,SAACf,GACtB,IAAMG,EAAY,YAAO/B,GACzB+B,EAAazB,GAASsB,EACtB3B,EAAmB8B,GA8JgBa,CAAehB,IAJhC,SAMGA,GALIA,MAQT,sBAAKY,UAAU,qBAAf,UACE,sBACEA,UAAU,aACVK,MAAO,CAAEjB,MAAOxB,GAFlB,SAIGF,IAEH,sBAAKsC,UAAU,qBAAf,UACE,0CACSlC,EAAQ,EADjB,IACqBN,EAAgB2B,UAErC,wBACEe,KAAK,SACLF,UAAU,wBACVG,QAAS,WAEP3B,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAZjB,+BAsBN,sBAAK0B,UAAU,qBAAf,UACE,8CACe,uBAAMA,UAAU,WAAhB,cAA6BrB,QAE5C,sBAAMqB,UAAU,aAAaK,MAAO,CAAEjB,MAAOxB,GAA7C,SACGF,IAEH,sBAAKsC,UAAU,qBAAf,UACE,0CACSlC,EAAQ,EADjB,IACqBN,EAAgB2B,UAErC,wBACEe,KAAK,SACLF,UAAU,wBACVG,QAAS,kBACP3B,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAXjB,8BAnLR,sBAAK0B,UAAU,mBAAf,UACGzB,EAAeP,aACd,wBACEkC,KAAK,SACLF,UAAU,gBACVG,QAAS,kBACP3B,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAXjB,mBAkBDC,EAAeN,aACd,qCACE,oBAAI+B,UAAU,qBAAd,8BACC7C,EAAW8C,KAAI,SAAChB,GAAD,OACd,yBAEEiB,KAAK,SACLF,UAAU,SACVG,QAAS,kBAtFJ,SAACG,GAG1B,IAFA,IAAMC,EAAa,GACbC,EAAoB,GACjBtB,EAAI,EAAGA,EAAIoB,EAAMpB,IAAK,CAC7B,IAAMuB,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC/BC,EAAgBH,KAAKC,MAAsB,EAAhBD,KAAKE,UACtCJ,EAAkBM,KAAlB,UAA0B5B,IAC1BqB,EAAWO,KAAK,CACdC,GAAIC,cACJ5B,MAAOlC,EAASuD,GAChBX,MAAO5C,EAAS2D,GAChBI,MAAM,IAGVzC,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,IAEbb,EAAmB+C,GACnBjD,EAAUgD,GA8DyBW,CAAmBjC,IAJpC,UAMGA,EANH,gBACOA,SAUZV,EAAeL,cACd,qCACE,oBAAI8B,UAAU,qBAAd,mDAGA,wBACEE,KAAK,SACLF,UAAU,SACVG,QAAS,WACPpC,EAAS,GAETS,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAbjB,mBAmBA,wBACE4B,KAAK,SACLF,UAAU,SACVG,QAAS,WACPpC,EAAS,GACTS,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAZjB,sBAmBA,sBAAM+B,MAAO,CAAEjB,MAAO,OAASY,UAAU,WAAzC,2BAGA,sBAAMK,MAAO,CAAEjB,MAAO,QAAUY,UAAU,WAA1C,4BAGA,sBAAMK,MAAO,CAAEjB,MAAO,SAAWY,UAAU,WAA3C,6BAGA,sBAAMK,MAAO,CAAEjB,MAAO,UAAYY,UAAU,WAA5C,iCAKHzB,EAAeF,SACd,gCACE,qBAAI2B,UAAU,iBAAd,WACIvB,GAAiB,oBACA,IAAlBA,GAAuB,kBACvBA,EAAgB,GAAhB,kBAAgCA,EAAhC,cAEH,qBAAKuB,UAAU,yBAAf,SACE,wBACEE,KAAK,SACLF,UAAU,wBACVG,QAAS,WACP3B,EAAkB,CAChBR,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,WAAW,KAXjB,2CCxOP6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BZ,M","file":"static/js/main.6ea9f119.chunk.js","sourcesContent":["/* eslint-disable react/jsx-curly-newline */\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'flexboxgrid';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype Color = {\n  id: string;\n  color: string;\n  title: string;\n  show: boolean;\n};\nconst colorArr = ['red', 'green', 'yellow', 'blue'];\nconst counterArr = [10, 20, 40];\n\nconst App = () => {\n  const [colors, setColors] = useState<Color[]>([]);\n  const [clickedColorArr, setClickedColorArr] = useState(['']);\n  const [shownTitle, setShowTitle] = useState('');\n  const [shownColor, setShowColor] = useState('');\n  const [count, setCount] = useState(-15);\n  const [whatWeGonnaSee, setWhatWeGonnaSee] = useState({\n    startButton: true,\n    gameOptions: false,\n    gameOptions2: false,\n    withKeyboard: false,\n    withButtons: false,\n    results: false,\n    startGame: false,\n  });\n\n  const [correctColors, setCorrectColors] = useState(0);\n  const [keyPress, setKeyPress] = useState('');\n  const [timeOut, setTimeOut] = useState(2000);\n  const [timer, setTimer] = useState(-3);\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    let counter = 0;\n    for (let i = 0; i < colors.length; i++) {\n      if (\n        colors[i].color.substring(0, 1).toLowerCase() ===\n        clickedColorArr[i].substring(0, 1).toLowerCase()\n      ) {\n        counter += 1;\n      }\n    }\n    setCorrectColors(counter);\n  }, [whatWeGonnaSee.results]);\n\n  useEffect(() => {\n    if (!whatWeGonnaSee.withKeyboard) {\n      return;\n    }\n    if (keyPress) {\n      const copyColorArr = [...clickedColorArr];\n      copyColorArr[count] = keyPress;\n      setClickedColorArr(copyColorArr);\n    }\n  }, [keyPress]);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      // @ts-ignore\n      document.body.addEventListener('keydown', (e) => setKeyPress(e.key));\n      isInitialMount.current = false;\n      return;\n    }\n    if (count < colors.length) {\n      setShowTitle(colors[count].title);\n      setShowColor(colors[count].color);\n      setKeyPress('');\n      setTimeout(() => {\n        setCount(count + 1);\n      }, timeOut);\n    } else {\n      setWhatWeGonnaSee({\n        startButton: false,\n        gameOptions: false,\n        gameOptions2: false,\n        withKeyboard: false,\n        withButtons: false,\n        results: true,\n        startGame: false,\n      });\n    }\n  }, [count]);\n\n  const GenerateColorArray = (size: number) => {\n    const copyColors = [];\n    const copyColorsClicked = [];\n    for (let i = 0; i < size; i++) {\n      const randomNumber = Math.floor(Math.random() * 4);\n      const randomNumber2 = Math.floor(Math.random() * 4);\n      copyColorsClicked.push(`${i}`);\n      copyColors.push({\n        id: uuidv4(),\n        color: colorArr[randomNumber],\n        title: colorArr[randomNumber2],\n        show: false,\n      });\n    }\n    setWhatWeGonnaSee({\n      startButton: false,\n      gameOptions: false,\n      gameOptions2: true,\n      withKeyboard: false,\n      withButtons: false,\n      results: false,\n      startGame: false,\n    });\n    setClickedColorArr(copyColorsClicked);\n    setColors(copyColors);\n  };\n\n  const changeColorArr = (color: string) => {\n    const copyColorArr = [...clickedColorArr];\n    copyColorArr[count] = color;\n    setClickedColorArr(copyColorArr);\n  };\n\n  return (\n    <>\n      <div className=\"background-color\" />\n      <div className=\"container header\">\n        <div className=\"row middle-xs center-xs\">\n          <div className=\"col-xs-8 col-xs-offset-2\">\n            <h1 className=\"header__heading\">Welcome to Color game</h1>\n          </div>\n          <div className=\"col-xs-2\">\n            {/* <div className=\"header__button-wrapper\">\n              <button type=\"button\" className=\"header__button\">\n                LV\n              </button>\n              <button type=\"button\" className=\"header__button\">\n                EN\n              </button>\n            </div> */}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            {!whatWeGonnaSee.startGame ? (\n              <div className=\"playArea__before\">\n                {whatWeGonnaSee.startButton && (\n                  <button\n                    type=\"button\"\n                    className=\"start__button\"\n                    onClick={() =>\n                      setWhatWeGonnaSee({\n                        startButton: false,\n                        gameOptions: true,\n                        gameOptions2: false,\n                        withKeyboard: false,\n                        withButtons: false,\n                        results: false,\n                        startGame: false,\n                      })\n                    }\n                  >\n                    START\n                  </button>\n                )}\n                {whatWeGonnaSee.gameOptions && (\n                  <>\n                    <h1 className=\"gameOption__header\">Select game size</h1>\n                    {counterArr.map((counter) => (\n                      <button\n                        key={counter}\n                        type=\"button\"\n                        className=\"button\"\n                        onClick={() => GenerateColorArray(counter)}\n                      >\n                        {counter} color game\n                      </button>\n                    ))}\n                  </>\n                )}\n                {whatWeGonnaSee.gameOptions2 && (\n                  <>\n                    <h1 className=\"gameOption__header\">\n                      Select keyboard or mouse to play with\n                    </h1>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setCount(0);\n\n                        setWhatWeGonnaSee({\n                          startButton: false,\n                          gameOptions: false,\n                          gameOptions2: false,\n                          withKeyboard: false,\n                          withButtons: true,\n                          results: false,\n                          startGame: true,\n                        });\n                      }}\n                    >\n                      mouse\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => {\n                        setCount(0);\n                        setWhatWeGonnaSee({\n                          startButton: false,\n                          gameOptions: false,\n                          gameOptions2: false,\n                          withKeyboard: true,\n                          withButtons: false,\n                          results: false,\n                          startGame: true,\n                        });\n                      }}\n                    >\n                      keyboard\n                    </button>\n\n                    <span style={{ color: 'red' }} className=\"heading2\">\n                      press r = red\n                    </span>\n                    <span style={{ color: 'blue' }} className=\"heading2\">\n                      press b = blue\n                    </span>\n                    <span style={{ color: 'green' }} className=\"heading2\">\n                      press g = green\n                    </span>\n                    <span style={{ color: 'yellow' }} className=\"heading2\">\n                      press y = yellow\n                    </span>\n                  </>\n                )}\n                {whatWeGonnaSee.results && (\n                  <div>\n                    <h2 className=\"result__header\">\n                      {!correctColors && 'sorry... 0 points'}\n                      {correctColors === 1 && 'you got 1 point'}\n                      {correctColors > 1 && `you got ${correctColors} points`}\n                    </h2>\n                    <div className=\"result__button-wrapper\">\n                      <button\n                        type=\"button\"\n                        className=\"button button--result\"\n                        onClick={() => {\n                          setWhatWeGonnaSee({\n                            startButton: true,\n                            gameOptions: false,\n                            gameOptions2: false,\n                            withKeyboard: false,\n                            withButtons: false,\n                            results: false,\n                            startGame: false,\n                          });\n                        }}\n                      >\n                        play again!\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"playArea__before playArea\">\n                {whatWeGonnaSee.withButtons ? (\n                  <div>\n                    {colorArr.map((color) => (\n                      <button\n                        key={color}\n                        className=\"button button--game\"\n                        type=\"button\"\n                        onClick={() => changeColorArr(color)}\n                      >\n                        {color}\n                      </button>\n                    ))}\n                    <div className=\"shownColor-wrapper\">\n                      <span\n                        className=\"shownColor\"\n                        style={{ color: shownColor }}\n                      >\n                        {shownTitle}\n                      </span>\n                      <div className=\"shownColor__footer\">\n                        <span>\n                          color {count + 1}/{clickedColorArr.length}\n                        </span>\n                        <button\n                          type=\"button\"\n                          className=\"button button--result\"\n                          onClick={() => {\n                            // setCount(-1000);\n                            setWhatWeGonnaSee({\n                              startButton: true,\n                              gameOptions: false,\n                              gameOptions2: false,\n                              withKeyboard: false,\n                              withButtons: false,\n                              results: false,\n                              startGame: false,\n                            });\n                          }}\n                        >\n                          end game\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"shownColor-wrapper\">\n                    <p>\n                      you pressed: <span className=\"keyPress\"> {keyPress}</span>\n                    </p>\n                    <span className=\"shownColor\" style={{ color: shownColor }}>\n                      {shownTitle}\n                    </span>\n                    <div className=\"shownColor__footer\">\n                      <span>\n                        color {count + 1}/{clickedColorArr.length}\n                      </span>\n                      <button\n                        type=\"button\"\n                        className=\"button button--result\"\n                        onClick={() =>\n                          setWhatWeGonnaSee({\n                            startButton: true,\n                            gameOptions: false,\n                            gameOptions2: false,\n                            withKeyboard: false,\n                            withButtons: false,\n                            results: false,\n                            startGame: false,\n                          })\n                        }\n                      >\n                        end game\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["sounds/simple.wav","components/button/button.tsx","components/timer/timer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","key","buttonClickHandler","className","label","type","onClick","Timer","timeOut","shownColor","style","animation","backgroundColor","colorArr","counterArr","timeOutArr","name","speed","App","useState","colors","setColors","clickedColorArr","setClickedColorArr","shownTitle","setShowTitle","setShowColor","count","setCount","startButton","gameOptions","gameOptions2","gameOptions3","withButtons","results","startGame","whatWeSee","setWhatWeSee","correctColors","setCorrectColors","keyPress","setKeyPress","setTimeOut","isInitialMount","useRef","audio","Audio","simpleSound","useEffect","counter","i","length","color","substring","toLowerCase","copyColorArr","console","log","current","document","body","addEventListener","e","play","title","setTimeout","animationBeforeStart","buttons","map","changeColorArr","size","copyColors","copyColorsClicked","randomCardName","Math","floor","random","randomTitleName","push","id","uuidv4","show","GenerateColorArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c4304a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/simple.dafe14e1.wav\";","import React, { FC } from 'react';\r\n// import styles from './button.module.scss';\r\nimport './button.css';\r\n\r\ntype Props = {\r\n  key?: number | string;\r\n  className: string;\r\n  label: string;\r\n  buttonClickHandler: () => void;\r\n};\r\n\r\nconst Button: FC<Props> = ({ key, buttonClickHandler, className, label }) => {\r\n  return (\r\n    <>\r\n      <button\r\n        key={key}\r\n        type=\"button\"\r\n        className={className}\r\n        onClick={buttonClickHandler}\r\n      >\r\n        {label}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC } from 'react';\r\nimport './timer.css';\r\n\r\ntype Props = {\r\n  timeOut: number;\r\n  shownColor: string;\r\n};\r\n\r\nconst Timer:FC<Props> = ({ timeOut, shownColor }) => {\r\n  return (\r\n    <div\r\n      className=\"timer-line\"\r\n      style={{\r\n        animation: `timer ${timeOut / 1000}s linear infinite`,\r\n        backgroundColor: shownColor,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","/* eslint-disable react/jsx-curly-newline */\nimport React, { useState, useEffect, useRef } from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport 'flexboxgrid';\nimport { v4 as uuidv4 } from 'uuid';\n// @ts-ignore\nimport simpleSound from './sounds/simple.wav';\nimport Button from './components/button/button';\nimport Timer from './components/timer/timer';\n\ntype Color = {\n  id: string;\n  color: string;\n  title: string;\n  show: boolean;\n};\nconst colorArr = ['red', 'green', 'yellow', 'blue'];\nconst counterArr = [10, 20, 40];\n\ntype TimeOut = {\n  name: string;\n  speed: number;\n};\n\nconst timeOutArr: TimeOut[] = [\n  { name: 'slow', speed: 3000 },\n  { name: 'medium', speed: 2000 },\n  { name: 'fast', speed: 1000 },\n];\n\nconst App = () => {\n  const [colors, setColors] = useState<Color[]>([]);\n  const [clickedColorArr, setClickedColorArr] = useState(['']);\n  const [shownTitle, setShowTitle] = useState('');\n  const [shownColor, setShowColor] = useState('');\n  const [count, setCount] = useState(-15);\n  const [whatWeSee, setWhatWeSee] = useState({\n    startButton: true,\n    gameOptions: false,\n    gameOptions2: false,\n    gameOptions3: false,\n    withButtons: false,\n    // withKeyboard: false,\n    results: false,\n    startGame: false,\n    animation: false,\n  });\n  const [correctColors, setCorrectColors] = useState(0);\n  const [keyPress, setKeyPress] = useState('');\n  const [timeOut, setTimeOut] = useState(2000);\n  const isInitialMount = useRef(true);\n\n  const audio = new Audio(simpleSound);\n\n  const playSound = (audioFile: { play: () => void }) => {\n    audioFile.play();\n  };\n\n  useEffect(() => {\n    let counter = 0;\n    for (let i = 0; i < colors.length; i++) {\n      if (\n        colors[i].color.substring(0, 1).toLowerCase() ===\n        clickedColorArr[i].substring(0, 1).toLowerCase()\n      ) {\n        counter += 1;\n      }\n    }\n    setCorrectColors(counter);\n  }, [whatWeSee.results]);\n\n  useEffect(() => {\n    if (whatWeSee.withButtons) {\n      return;\n    }\n    if (keyPress) {\n      const copyColorArr = [...clickedColorArr];\n      copyColorArr[count] = keyPress;\n      setClickedColorArr(copyColorArr);\n    }\n  }, [keyPress]);\n\n  console.log(clickedColorArr);\n  // console.log(whatWeSee);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      // @ts-ignore\n      document.body.addEventListener('keydown', (e) => setKeyPress(e.key));\n      isInitialMount.current = false;\n      return;\n    }\n    if (!whatWeSee.startGame) {\n      return;\n    }\n\n    if (count > 0 && !clickedColorArr[count - 1]) {\n      playSound(audio);\n    }\n\n    if (count < colors.length) {\n      // console.log(count, 'gii');\n      setShowTitle(colors[count].title);\n      setShowColor(colors[count].color);\n      setKeyPress('');\n      setTimeout(() => {\n        setCount(count + 1);\n      }, timeOut);\n    } else {\n      setWhatWeSee({\n        ...whatWeSee,\n        withButtons: false,\n        results: true,\n        startGame: false,\n      });\n    }\n  }, [count, whatWeSee.startGame]);\n\n  const GenerateColorArray = (size: number) => {\n    const copyColors = [];\n    const copyColorsClicked = [];\n    for (let i = 0; i < size; i++) {\n      const randomCardName = Math.floor(Math.random() * 4);\n      const randomTitleName = Math.floor(Math.random() * 4);\n      copyColorsClicked.push('');\n      copyColors.push({\n        id: uuidv4(),\n        color: colorArr[randomCardName],\n        title: colorArr[randomTitleName],\n        show: false,\n      });\n    }\n    setWhatWeSee({\n      ...whatWeSee,\n      gameOptions: false,\n      gameOptions2: true,\n    });\n    setClickedColorArr(copyColorsClicked);\n    setColors(copyColors);\n  };\n\n  const changeColorArr = (color: string) => {\n    const copyColorArr = [...clickedColorArr];\n    copyColorArr[count] = color;\n    setClickedColorArr(copyColorArr);\n  };\n\n  const animationBeforeStart = (buttons: boolean) => {\n    setWhatWeSee({\n      ...whatWeSee,\n      gameOptions3: false,\n      animation: true,\n    });\n    setTimeout(() => {\n      setCount(0);\n      setWhatWeSee({\n        ...whatWeSee,\n        gameOptions3: false,\n        withButtons: buttons,\n        startGame: true,\n        animation: false,\n      });\n    }, 2000);\n  };\n\n  return (\n    <>\n      <div className=\"background-color\" />\n      <div className=\"container header\">\n        <div className=\"row middle-xs center-xs\">\n          <div className=\"col-xs-12\">\n            <h1 className=\"header__heading\">Welcome to Color game</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            {!whatWeSee.startGame ? (\n              <div className=\"playArea\">\n                {whatWeSee.startButton && (\n                  <Button\n                    className=\"start__button\"\n                    label=\"START\"\n                    buttonClickHandler={() =>\n                      setWhatWeSee({\n                        ...whatWeSee,\n                        startButton: false,\n                        gameOptions: true,\n                      })\n                    }\n                  />\n                )}\n                {whatWeSee.gameOptions && (\n                  <>\n                    <h1 className=\"gameOption__header\">Select game size</h1>\n                    {counterArr.map((counter) => (\n                      <Button\n                        className=\"button\"\n                        key={counter}\n                        label={`${counter} color game`}\n                        buttonClickHandler={() => GenerateColorArray(counter)}\n                      />\n                    ))}\n                  </>\n                )}\n                {whatWeSee.gameOptions2 && (\n                  <>\n                    <h1 className=\"gameOption__header\">Select game speed</h1>\n                    {timeOutArr.map(({ name, speed }) => (\n                      <Button\n                        className=\"button\"\n                        key={name}\n                        label={`${name}: ${speed / 1000} sec`}\n                        buttonClickHandler={() => {\n                          setTimeOut(speed);\n                          setWhatWeSee({\n                            ...whatWeSee,\n                            gameOptions3: true,\n                            gameOptions2: false,\n                          });\n                        }}\n                      />\n                    ))}\n                  </>\n                )}\n\n                {whatWeSee.gameOptions3 && (\n                  <>\n                    <h1 className=\"gameOption__header\">\n                      Select keyboard or mouse to play with\n                    </h1>\n                    <Button\n                      className=\"button\"\n                      label=\"mouse\"\n                      buttonClickHandler={() => animationBeforeStart(true)}\n                    />\n                    <Button\n                      className=\"button\"\n                      label=\"keyboard\"\n                      buttonClickHandler={() => animationBeforeStart(false)}\n                    />\n                    {colorArr.map((color) => (\n                      <span key={color} style={{ color }} className=\"heading2\">\n                        {`press ${color.substring(0, 1)} = ${color}`}\n                      </span>\n                    ))}\n                  </>\n                )}\n                {whatWeSee.animation && (\n                  <span className=\"animation\">\n                    <span style={{ color: 'yellow' }}>Let's</span>\n                    <span style={{ color: 'red' }}>GO!!!</span>\n                  </span>\n                )}\n\n                {whatWeSee.results && (\n                  <div>\n                    <h2 className=\"result__header\">\n                      {!correctColors && 'sorry... 0 points'}\n                      {correctColors === 1 && 'you got 1 point'}\n                      {correctColors > 1 && `you got ${correctColors} points`}\n                    </h2>\n                    <div className=\"result__button-wrapper\">\n                      <Button\n                        className=\"button button--result\"\n                        label=\"play again!\"\n                        buttonClickHandler={() => {\n                          setWhatWeSee({\n                            ...whatWeSee,\n                            startButton: true,\n                            results: false,\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"playArea\">\n                {whatWeSee.withButtons ? (\n                  <div>\n                    <div className=\"shownColor-wrapper\">\n                      <div className=\"shownColor__footer\">\n                        <span>\n                          color {count + 1}/{clickedColorArr.length}\n                        </span>\n                        <Button\n                          label=\"end game\"\n                          className=\"button button--result\"\n                          buttonClickHandler={() => {\n                            setTimeout(() => {\n                              setWhatWeSee({\n                                ...whatWeSee,\n                                startButton: true,\n                                withButtons: false,\n                                startGame: false,\n                              });\n                            }, 300);\n                          }}\n                        />\n                      </div>\n                      <span\n                        className=\"shownColor\"\n                        style={{ color: shownColor }}\n                      >\n                        {shownTitle}\n                      </span>\n                      <Timer timeOut={timeOut} shownColor={shownColor} />\n                    </div>\n                    {colorArr.map((color) => (\n                      <Button\n                        key={color}\n                        label={color}\n                        className=\"button button--game\"\n                        buttonClickHandler={() => {\n                          changeColorArr(color);\n                        }}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"shownColor-wrapper\">\n                    <p>\n                      you pressed:{' '}\n                      <span className=\"keyPress\" style={{ color: shownColor }}>\n                        {' '}\n                        {keyPress}\n                      </span>\n                    </p>\n                    <span className=\"shownColor\" style={{ color: shownColor }}>\n                      {shownTitle}\n                    </span>\n                    <Timer timeOut={timeOut} shownColor={shownColor} />\n                    <div className=\"shownColor__footer\">\n                      <span>\n                        color {count + 1}/{clickedColorArr.length}\n                      </span>\n                      <Button\n                        label=\"end game\"\n                        className=\"button button--result\"\n                        buttonClickHandler={() => {\n                          setTimeout(() => {\n                            setWhatWeSee({\n                              ...whatWeSee,\n                              startButton: true,\n                              withButtons: false,\n                              startGame: false,\n                            });\n                          }, 300);\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}